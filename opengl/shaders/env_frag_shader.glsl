#version 150

in vec3 pos_cs;
in vec2 texture_coords;
in vec3 dir_ws;

uniform vec4 sundir_cs;
uniform vec4 diffuse_colour;
uniform int have_texture;
uniform sampler2D diffuse_tex;
uniform sampler2D noise_tex;
uniform sampler2D fbm_tex;
uniform mat3 texture_matrix;
uniform vec3 campos_ws;
uniform float time;

out vec4 colour_out;


vec3 toNonLinear(vec3 x)
{
	// Approximation to pow(x, 0.4545).  Max error of ~0.004 over [0, 1].
	return 0.124445006f*x*x + -0.35056138f*x + 1.2311935*sqrt(x);
}


// This data should be the same as in GridNoise.cpp and PerlinNoise.cpp, so results are the same on GPU and CPU.
// Total constant mem usage of this stuff = 6160 B
int p_x[256] = int[](231, 101, 162, 155, 221, 105, 34, 28, 116, 181, 138, 154, 144, 45, 255, 17, 251, 226, 204, 21, 81, 49, 129, 118, 214, 174, 62, 8, 102, 35, 93, 179, 89, 246, 98, 128, 170, 171, 0, 57, 61, 111, 59, 97, 217, 203, 32, 86, 132, 65, 108, 75, 228, 235, 91, 74, 156, 215, 223, 158, 193, 30, 152, 202, 25, 77, 222, 243, 211, 183, 42, 122, 206, 233, 197, 120, 9, 54, 220, 173, 56, 16, 6, 117, 145, 12, 161, 96, 27, 178, 121, 124, 68, 131, 248, 26, 125, 199, 191, 141, 44, 67, 82, 2, 109, 112, 13, 139, 36, 107, 234, 15, 52, 187, 1, 201, 249, 113, 115, 207, 166, 254, 219, 205, 185, 64, 244, 7, 73, 90, 106, 157, 41, 11, 151, 164, 50, 227, 71, 236, 40, 150, 165, 46, 172, 103, 137, 63, 176, 209, 210, 238, 22, 18, 38, 140, 186, 177, 29, 23, 127, 247, 87, 100, 240, 149, 133, 230, 76, 66, 4, 78, 3, 24, 143, 148, 194, 192, 19, 14, 188, 84, 196, 212, 94, 200, 110, 224, 39, 10, 142, 47, 252, 85, 237, 168, 5, 218, 70, 104, 198, 195, 182, 241, 232, 225, 130, 53, 242, 250, 147, 20, 175, 184, 180, 69, 169, 245, 31, 119, 33, 114, 51, 92, 55, 163, 43, 58, 208, 135, 79, 37, 159, 253, 229, 88, 80, 134, 123, 136, 126, 60, 160, 213, 83, 48, 239, 153, 99, 95, 167, 216, 190, 189, 72, 146 );
int p_y[256] = int[](50, 163, 25, 146, 86, 180, 182, 69, 208, 58, 249, 0, 118, 7, 183, 155, 176, 210, 42, 218, 204, 142, 156, 119, 66, 101, 97, 29, 232, 149, 80, 195, 47, 63, 141, 31, 83, 38, 26, 217, 76, 143, 185, 152, 11, 230, 100, 244, 186, 169, 95, 193, 82, 89, 226, 99, 62, 90, 52, 33, 191, 221, 220, 4, 181, 96, 92, 5, 205, 130, 56, 207, 3, 24, 39, 30, 139, 225, 160, 122, 246, 117, 248, 213, 237, 41, 140, 255, 134, 121, 110, 197, 242, 251, 51, 40, 78, 60, 32, 79, 57, 178, 45, 151, 36, 241, 14, 27, 254, 224, 173, 223, 243, 231, 202, 209, 158, 190, 71, 104, 23, 214, 37, 55, 240, 137, 170, 219, 203, 144, 21, 13, 239, 54, 85, 77, 8, 22, 115, 28, 46, 199, 73, 126, 20, 222, 228, 235, 253, 74, 148, 88, 128, 188, 171, 216, 172, 87, 212, 12, 179, 124, 17, 167, 6, 184, 168, 112, 164, 65, 162, 98, 250, 127, 114, 48, 129, 68, 145, 81, 187, 245, 102, 135, 189, 229, 16, 91, 136, 166, 200, 43, 93, 107, 94, 157, 61, 113, 175, 161, 252, 194, 111, 196, 211, 238, 247, 64, 233, 147, 159, 9, 132, 133, 75, 84, 154, 234, 215, 34, 44, 174, 70, 35, 236, 2, 108, 49, 123, 192, 109, 120, 153, 201, 10, 165, 150, 15, 105, 19, 206, 72, 125, 227, 53, 67, 103, 138, 131, 59, 116, 1, 198, 18, 177, 106 );
int p_z[256] = int[](139, 47, 196, 125, 189, 195, 215, 57, 221, 77, 178, 59, 159, 232, 248, 94, 251, 176, 186, 224, 249, 234, 116, 164, 83, 180, 172, 236, 101, 141, 167, 245, 214, 34, 63, 133, 120, 191, 179, 27, 243, 90, 97, 222, 37, 117, 45, 237, 92, 184, 61, 100, 67, 188, 10, 2, 142, 58, 165, 144, 255, 8, 85, 108, 87, 12, 121, 28, 231, 41, 52, 14, 254, 95, 201, 15, 81, 244, 72, 242, 119, 74, 93, 246, 9, 32, 17, 118, 64, 68, 161, 38, 154, 235, 247, 103, 55, 220, 84, 162, 205, 69, 111, 228, 173, 70, 211, 49, 56, 130, 35, 140, 230, 82, 208, 131, 153, 89, 212, 170, 209, 3, 174, 73, 177, 21, 157, 233, 44, 31, 24, 148, 23, 134, 30, 113, 185, 33, 169, 43, 218, 88, 158, 122, 238, 182, 216, 168, 54, 151, 240, 225, 40, 124, 199, 62, 114, 155, 98, 227, 197, 145, 0, 1, 20, 6, 66, 79, 239, 126, 210, 19, 11, 13, 200, 75, 60, 123, 193, 76, 48, 171, 129, 147, 99, 138, 156, 198, 150, 96, 86, 50, 39, 253, 36, 135, 241, 146, 5, 26, 204, 127, 109, 29, 213, 91, 229, 53, 152, 7, 128, 223, 181, 202, 115, 187, 4, 226, 163, 143, 136, 105, 22, 137, 190, 46, 250, 25, 207, 71, 51, 107, 132, 203, 42, 18, 16, 110, 183, 252, 192, 206, 65, 219, 194, 104, 166, 106, 78, 102, 112, 80, 175, 217, 149, 160 );
//int p_w[256] = int[](170, 198, 116, 49, 29, 26, 250, 18, 34, 36, 84, 221, 154, 214, 95, 207, 176, 16, 231, 234, 79, 148, 21, 118, 90, 151, 11, 220, 73, 173, 223, 39, 228, 254, 59, 127, 171, 191, 161, 245, 166, 78, 218, 165, 102, 108, 202, 253, 74, 162, 172, 232, 121, 20, 28, 60, 54, 159, 128, 35, 110, 69, 27, 82, 219, 186, 237, 71, 236, 179, 216, 210, 248, 25, 147, 169, 58, 80, 244, 150, 155, 53, 92, 137, 77, 62, 185, 15, 249, 184, 242, 153, 188, 164, 103, 101, 23, 144, 235, 239, 200, 76, 230, 96, 156, 199, 174, 209, 238, 50, 158, 224, 212, 251, 87, 196, 140, 22, 112, 187, 178, 86, 217, 19, 13, 138, 211, 6, 157, 132, 57, 222, 139, 183, 215, 51, 120, 241, 203, 225, 125, 70, 37, 205, 146, 94, 240, 33, 136, 115, 119, 213, 246, 133, 252, 189, 247, 135, 109, 97, 114, 175, 45, 99, 117, 107, 129, 181, 98, 141, 167, 61, 227, 104, 1, 143, 206, 81, 8, 64, 124, 14, 24, 47, 201, 145, 30, 243, 56, 255, 38, 123, 193, 52, 163, 93, 142, 180, 105, 204, 131, 40, 83, 72, 91, 126, 160, 46, 63, 122, 85, 152, 68, 42, 0, 233, 67, 195, 229, 111, 149, 48, 197, 134, 12, 113, 75, 100, 106, 31, 194, 208, 43, 17, 65, 55, 182, 192, 4, 10, 44, 130, 3, 190, 7, 2, 168, 41, 32, 5, 89, 66, 226, 9, 177, 88 );
//float new_gradient_comp[1024] = float[](1.2217675f, 0.712062f, 0.01588051f, 0.0f, 1.3607887f, -0.14721476f, -0.35578328f, 0.0f, -0.7802296f, -1.1795083f, 0.0012937397f, 0.0f, 1.3950601f, 0.23190066f, 0.0054225293f, 0.0f, -0.80019593f, -0.5646587f, 1.0202191f, 0.0f, -0.28760266f, -1.0916903f, 0.85176116f, 0.0f, -0.31948748f, -0.3866439f, 1.3222836f, 0.0f, 0.47278804f, 0.56410426f, 1.2075834f, 0.0f, 1.1846286f, 0.69302064f, 0.34114096f, 0.0f, 0.8134863f, -1.0835869f, -0.40506712f, 0.0f, -0.4991114f, 1.0786201f, 0.7664635f, 0.0f, 0.07553511f, -0.5038401f, -1.3192571f, 0.0f, -0.16927134f, -0.3192459f, 1.3672707f, 0.0f, -0.7352411f, 0.6770137f, -1.0005363f, 0.0f, 0.0839408f, -1.3810046f, 0.29288274f, 0.0f, 1.2817632f, -0.39901075f, -0.44482964f, 0.0f, -0.11824035f, 1.1731535f, 0.78085196f, 0.0f, -0.18247294f, -1.2740637f, -0.5860591f, 0.0f, 1.2722632f, -0.52608854f, 0.32338434f, 0.0f, 0.9800476f, -0.2954869f, 0.9758044f, 0.0f, 0.7672084f, 0.29675588f, -1.1503595f, 0.0f, 0.71180165f, 1.1748402f, -0.33628643f, 0.0f, -1.291956f, 0.32255512f, 0.4762438f, 0.0f, 0.05612059f, -0.45176575f, -1.3389392f, 0.0f, 1.0700527f, 0.64709544f, -0.6604957f, 0.0f, 0.8986161f, 0.74182624f, -0.8013632f, 0.0f, 0.82473594f, -0.8259473f, 0.79851216f, 0.0f, -0.5553038f, -1.2351967f, 0.40734136f, 0.0f, -1.3227346f, -0.38855377f, 0.31527597f, 0.0f, 0.47688493f, 0.82791287f, -1.0426605f, 0.0f, 0.26156196f, -1.0642762f, 0.8938128f, 0.0f, 0.45979345f, 1.1061141f, 0.75173235f, 0.0f, -0.22312103f, 1.3265966f, -0.43630096f, 0.0f, -0.7135227f, -1.1696804f, -0.35033286f, 0.0f, -0.7289005f, -0.3378183f, -1.1638654f, 0.0f, -1.1839386f, 0.35015768f, 0.689695f, 0.0f, 0.97463083f, -0.35804725f, -0.96015453f, 0.0f, -0.25951636f, 0.603927f, -1.2521675f, 0.0f, -0.99525946f, -0.9872199f, 0.18669663f, 0.0f, 0.4884273f, 0.0008922555f, -1.3271917f, 0.0f, 0.36775345f, 1.359991f, -0.12321564f, 0.0f, -0.77251935f, -0.011047548f, -1.1845217f, 0.0f, -0.1553533f, 0.18639466f, 1.3932416f, 0.0f, -0.9969885f, 0.22508359f, -0.9774208f, 0.0f, -1.1669985f, -0.70016086f, 0.3845635f, 0.0f, -0.08003377f, 1.3094746f, 0.5280823f, 0.0f, -1.0815691f, 0.76709056f, -0.4917116f, 0.0f, 1.3061343f, 0.22399351f, 0.49380141f, 0.0f, -1.2673091f, 0.19924408f, 0.59517175f, 0.0f, 0.07320642f, -0.89985275f, 1.0885338f, 0.0f, -0.9104535f, -1.0614668f, 0.2106249f, 0.0f, 1.2987351f, -0.35686237f, -0.43120304f, 0.0f, 1.3225027f, -0.19561811f, 0.46121565f, 0.0f, -0.76539797f, 0.0934198f, 1.185512f, 0.0f, 0.19297157f, 1.3978469f, 0.093732394f, 0.0f, 0.171591f, -1.296039f, 0.5392952f, 0.0f, 0.30717435f, -1.1813134f, -0.7142426f, 0.0f, 1.3074099f, -0.48514658f, 0.23518515f, 0.0f, -0.63147205f, -0.9552431f, -0.8299117f, 0.0f, -0.95252913f, -0.2877752f, -1.0049247f, 0.0f, 0.09535145f, -1.0691112f, 0.92081994f, 0.0f, 1.1668291f, 0.75242287f, 0.26901582f, 0.0f, -0.02152404f, -0.4387372f, -1.3442643f, 0.0f, 0.112786196f, 1.1577513f, 0.80429554f, 0.0f, 0.6569863f, -1.1443766f, 0.5086958f, 0.0f, -1.0288467f, -0.9388859f, -0.24488229f, 0.0f, -1.1528425f, -0.45526367f, -0.6809471f, 0.0f, 0.65911376f, -1.2405072f, -0.16343427f, 0.0f, -1.1182064f, 0.8502136f, -0.163558f, 0.0f, 1.0095143f, -0.799984f, -0.5838717f, 0.0f, 0.11524004f, 1.0996591f, -0.8817423f, 0.0f, -0.15407743f, -0.8393678f, 1.1277064f, 0.0f, 1.1789563f, -0.5601235f, 0.5443563f, 0.0f, -0.35730088f, 0.32391277f, -1.3294421f, 0.0f, 0.109488994f, 1.0678205f, 0.92074496f, 0.0f, 0.4268467f, -0.5000724f, 1.25209f, 0.0f, -0.37105423f, 1.1707182f, -0.70124f, 0.0f, 0.21148631f, 0.7212629f, 1.1979371f, 0.0f, 0.5407461f, 0.005004336f, -1.3067397f, 0.0f, -1.2625091f, -0.12781286f, -0.6242872f, 0.0f, 0.5249351f, 0.8367019f, -1.0121131f, 0.0f, 0.41844487f, -0.8460886f, -1.0531087f, 0.0f, -0.5716144f, 0.005793164f, -1.2935313f, 0.0f, 0.8119531f, 0.5438339f, 1.022241f, 0.0f, -0.54861456f, 0.12163565f, 1.2977777f, 0.0f, 0.6688509f, 0.8263308f, -0.9326393f, 0.0f, 0.95412827f, 0.8600385f, 0.5915851f, 0.0f, -1.0885842f, 0.90040433f, -0.06524062f, 0.0f, -0.005759728f, -0.67137027f, -1.2446802f, 0.0f, -1.2110623f, -0.6195539f, -0.3866277f, 0.0f, 0.77440953f, -0.70766217f, 0.94842184f, 0.0f, -1.0332464f, 0.9040712f, -0.3392002f, 0.0f, -0.36988673f, 1.2661648f, 0.5099124f, 0.0f, 1.1309074f, -0.7905824f, -0.30988336f, 0.0f, -0.33273917f, 1.0814632f, 0.8483643f, 0.0f, 0.97334665f, -0.0755921f, 1.0231725f, 0.0f, 0.70829463f, 0.84886676f, -0.88189787f, 0.0f, -0.5234297f, -1.1049227f, -0.71075124f, 0.0f, 0.5937486f, -1.2831291f, 0.03228752f, 0.0f, -0.9974024f, -0.684244f, -0.73280185f, 0.0f, 0.23468938f, 0.55065066f, 1.2812902f, 0.0f, -1.0688089f, -0.9247148f, -0.050497822f, 0.0f, 0.5700612f, 0.82638216f, -0.9960535f, 0.0f, -0.0877179f, 0.8129874f, 1.1538445f, 0.0f, 0.6909272f, 0.89873904f, -0.84551036f, 0.0f, -0.09547908f, -0.94106597f, -1.0513222f, 0.0f, -0.53019375f, -1.2995576f, 0.17333287f, 0.0f, 0.82106006f, 0.92505485f, -0.68566287f, 0.0f, 0.15590963f, -0.4393269f, -1.3351719f, 0.0f, -0.89192814f, 1.0970672f, -0.030126903f, 0.0f, -0.08408829f, -0.60024166f, 1.2777476f, 0.0f, 0.6794543f, -0.60840094f, 1.0808283f, 0.0f, -0.76939297f, 0.98626083f, -0.65979075f, 0.0f, -0.10956462f, -0.4060935f, -1.350216f, 0.0f, -0.684066f, -1.0544983f, 0.648141f, 0.0f, 0.02441598f, 0.0362415f, -1.4135382f, 0.0f, -1.0618824f, 0.022188257f, -0.9337631f, 0.0f, -1.1441141f, 0.7878423f, -0.26515558f, 0.0f, 0.058541097f, -0.3003217f, -1.380717f, 0.0f, -0.9569771f, -0.6584042f, 0.806659f, 0.0f, -0.24600904f, -1.3758032f, 0.21597528f, 0.0f, -0.88116527f, -1.069854f, 0.28099808f, 0.0f, 0.024006834f, -1.3813568f, 0.30212083f, 0.0f, -1.3154874f, -0.019679867f, 0.5187541f, 0.0f, -0.57269514f, 0.6097337f, -1.1402828f, 0.0f, -0.6481962f, -1.1898116f, -0.405204f, 0.0f, 1.106471f, -0.86278516f, -0.17698447f, 0.0f, -0.6692407f, 0.510997f, -1.1362214f, 0.0f, -0.72755563f, -0.6669765f, 1.0128202f, 0.0f, -1.3252611f, 0.1493681f, 0.4705023f, 0.0f, 0.19401741f, -1.1472582f, -0.8038382f, 0.0f, -0.20135166f, 1.3620147f, -0.3230685f, 0.0f, -0.3465082f, -1.2298198f, -0.6061974f, 0.0f, 0.7090645f, -1.2066388f, 0.20310187f, 0.0f, -0.7461575f, 0.2965537f, -1.1641756f, 0.0f, 0.82119787f, -0.101538256f, 1.1468757f, 0.0f, 0.3160148f, 0.32154885f, -1.3404256f, 0.0f, -0.20991981f, 0.9936543f, 0.984167f, 0.0f, 0.71509385f, 0.6122842f, -1.0553429f, 0.0f, -0.2866777f, -0.017979437f, -1.3847356f, 0.0f, -0.18753667f, -1.2829365f, -0.56471556f, 0.0f, -0.39541546f, -0.7639763f, 1.1224914f, 0.0f, -0.841768f, -0.9671753f, 0.5966559f, 0.0f, 1.2302022f, -0.6129607f, 0.33298868f, 0.0f, 0.96174645f, -0.94194883f, 0.43333146f, 0.0f, 0.7315173f, -0.743932f, 0.9546976f, 0.0f, 0.43450707f, -0.14785849f, 1.3376627f, 0.0f, -1.3895429f, -0.17501938f, -0.19631243f, 0.0f, 0.401743f, -1.2184675f, -0.59492815f, 0.0f, -0.8089247f, -1.1517212f, 0.13848755f, 0.0f, -0.53921634f, -1.1060407f, 0.6970793f, 0.0f, -0.34132084f, 1.3280764f, -0.34599638f, 0.0f, -0.5834173f, -1.1030387f, -0.6655297f, 0.0f, -1.3399771f, -0.23306613f, 0.3874809f, 0.0f, -1.2113615f, 0.012722072f, 0.72968584f, 0.0f, -1.1879939f, -0.034058664f, -0.76649237f, 0.0f, 1.3500694f, -0.26719695f, 0.3254508f, 0.0f, -0.3505058f, -1.132774f, -0.77069354f, 0.0f, -0.9986594f, 0.964588f, -0.26879254f, 0.0f, 0.73152626f, 0.53474563f, -1.0857792f, 0.0f, -0.76953125f, -0.06108459f, 1.1849432f, 0.0f, -0.64757526f, 1.2553089f, 0.06960982f, 0.0f, 1.2856635f, -0.5803483f, -0.10131773f, 0.0f, 1.2423098f, 0.40571937f, -0.540424f, 0.0f, 0.815351f, -0.51635116f, 1.0337235f, 0.0f, 0.3549998f, -1.3538932f, 0.20235763f, 0.0f, -1.1422691f, -0.80544925f, 0.21557531f, 0.0f, 0.7005721f, 1.2192694f, 0.1502686f, 0.0f, 0.6906597f, -0.79112947f, -0.9471554f, 0.0f, -0.120454386f, -1.2386732f, -0.6716987f, 0.0f, 0.09759171f, 0.5199476f, 1.3115374f, 0.0f, -0.84451693f, 1.127364f, -0.12586178f, 0.0f, -0.89219034f, -0.84043807f, -0.7054504f, 0.0f, 0.02566888f, 0.9676893f, 1.0309794f, 0.0f, -0.700163f, -1.1143522f, -0.5176781f, 0.0f, 1.3460315f, -0.0236904f, -0.4331719f, 0.0f, -0.11510516f, -0.61843073f, -1.2666074f, 0.0f, -1.253822f, 0.08001415f, 0.64925206f, 0.0f, 0.6721985f, -1.0603987f, 0.65092534f, 0.0f, -0.831632f, 0.64095503f, 0.947399f, 0.0f, -1.227985f, -0.58380544f, -0.38887548f, 0.0f, -1.3114156f, -0.2044101f, 0.48826802f, 0.0f, -1.1869335f, 0.015209729f, -0.7687375f, 0.0f, -0.37943375f, -1.1958857f, 0.65260047f, 0.0f, -1.3263744f, 0.053133093f, 0.4877578f, 0.0f, -1.196407f, 0.294172f, -0.69431484f, 0.0f, 1.3378062f, -0.27976292f, 0.36332792f, 0.0f, 0.22572564f, -0.80908334f, -1.1377311f, 0.0f, 0.7750611f, -1.1527683f, -0.26534054f, 0.0f, 0.33238852f, 1.16924f, -0.7227694f, 0.0f, -0.67516065f, 0.080741405f, 1.2400156f, 0.0f, 0.58777493f, -1.1112406f, 0.6478156f, 0.0f, 0.06718903f, -0.09866082f, -1.4091669f, 0.0f, 0.8829045f, 0.13082843f, -1.0969791f, 0.0f, -0.869991f, 0.79579705f, -0.78091127f, 0.0f, 0.49027187f, 1.1478227f, -0.66493326f, 0.0f, -0.17075591f, -1.3954564f, 0.15343957f, 0.0f, 0.86016256f, -0.09280284f, 1.1187081f, 0.0f, 0.6769616f, -0.7185542f, -1.0126218f, 0.0f, -0.26405752f, 1.2891669f, -0.5179985f, 0.0f, 1.0039982f, 0.9158217f, -0.39148217f, 0.0f, -0.7335434f, -1.0671983f, -0.56833255f, 0.0f, -1.2204845f, 0.71302235f, -0.044907805f, 0.0f, 1.2533983f, -0.52919114f, -0.38593954f, 0.0f, -0.56050724f, 0.8623433f, 0.97066754f, 0.0f, -0.73982877f, 1.1953744f, 0.15405685f, 0.0f, -1.2482655f, -0.6512527f, -0.13305321f, 0.0f, -0.1240304f, -1.3151317f, -0.5050198f, 0.0f, 0.77526546f, 0.9445723f, -0.7118614f, 0.0f, -0.35771957f, 1.1309962f, -0.7699896f, 0.0f, 0.3084065f, 1.0112484f, 0.9392882f, 0.0f, -1.0533848f, 0.92421985f, -0.19025913f, 0.0f, -0.40539628f, -0.43431336f, 1.283365f, 0.0f, -1.2124337f, -0.602062f, 0.40929934f, 0.0f, 0.5331655f, -0.6867803f, 1.1153777f, 0.0f, -0.9967648f, -1.0012234f, -0.06333373f, 0.0f, -0.09691184f, -1.3915098f, 0.23304155f, 0.0f, 1.0925958f, 0.8729167f, -0.21035846f, 0.0f, -0.48023492f, 0.43022883f, -1.2586809f, 0.0f, -0.065505445f, -1.4030484f, 0.16481626f, 0.0f, -1.2536665f, -0.3792855f, 0.5333504f, 0.0f, 0.009398728f, 0.6385096f, 1.2618308f, 0.0f, 1.1441367f, -0.6024483f, 0.57271904f, 0.0f, 0.10554816f, 0.4571117f, -1.3341321f, 0.0f, -0.6458833f, 0.5233584f, 1.1440852f, 0.0f, -0.3794073f, 1.2248712f, -0.59643996f, 0.0f, 1.0323623f, -0.8109783f, -0.52587265f, 0.0f, -0.6823133f, 0.67881054f, -1.036178f, 0.0f, -1.3398359f, 0.43295148f, -0.13188179f, 0.0f, 1.2136087f, 0.70149624f, -0.187234f, 0.0f, -0.17654604f, 1.3396044f, 0.4174824f, 0.0f, -0.3889849f, -1.2737161f, -0.47574973f, 0.0f, 0.22461659f, 0.31285396f, -1.3607607f, 0.0f, -1.2542349f, 0.18985422f, 0.62518007f, 0.0f, 0.94621f, 1.0454648f, 0.10811998f, 0.0f, -0.509028f, -0.96572226f, -0.899039f, 0.0f, 0.96559405f, -1.0191334f, 0.17027934f, 0.0f, -0.7289048f, -0.85398775f, -0.85988516f, 0.0f, -0.6425919f, 1.0786531f, 0.6508325f, 0.0f, 1.2097566f, 0.30589676f, -0.66551936f, 0.0f, -0.9092476f, 0.37070644f, 1.0177649f, 0.0f, 0.8539877f, 0.7374643f, -0.8525557f, 0.0f, 0.120255314f, -1.1968548f, -0.74369156f, 0.0f, -1.0489913f, -0.36604756f, 0.87500083f, 0.0f, 0.27619264f, 0.21909976f, -1.3695667f, 0.0f, -1.233398f, -0.64151937f, -0.25919512f, 0.0f, -1.1352836f, -0.8386433f, 0.08836593f, 0.0f, -1.1510859f, 0.7769107f, 0.26722887f, 0.0f, -0.29381785f, -0.4719212f, -1.3003696f, 0.0f, 0.21122588f, 1.1665981f, -0.77099466f, 0.0f, 0.7729178f, -1.1843047f, 0.00454461f, 0.0f, 0.661856f, 1.2243718f, -0.25071904f, 0.0f, -0.65207416f, 0.68469095f, 1.0516641f, 0.0f, -0.92744684f, 1.0299762f, -0.281054f, 0.0f, -0.9413422f, -0.7409057f, -0.75162065f, 0.0f, -0.96460235f, 0.43810418f, -0.93680674f, 0.0f);
vec2 gradients[256] = vec2[](vec2(-1.3319216f, 0.18818918f), vec2(0.57701856f, 0.003576953f), vec2(-0.23113096f, -0.4510943f), vec2(0.31901717f, -0.3718079f), vec2(0.19423327f, 0.49124578f), vec2(0.49572006f, 0.40368846f), vec2(0.64163435f, 0.72831976f), vec2(-0.80989045f, -1.1129818f), vec2(0.80845374f, -1.1348674f), vec2(-1.0782652f, 0.7045635f), vec2(-1.3886044f, 0.013263114f), vec2(0.89168257f, -1.0365491f), vec2(0.9601096f, -1.0365223f), vec2(-0.56402713f, -0.60338444f), vec2(1.2031989f, -0.43249863f), vec2(1.004202f, 0.023058135f), vec2(-0.2807517f, 0.64237714f), vec2(-1.3189248f, -0.25452304f), vec2(0.29017016f, -0.46485114f), vec2(0.7085925f, -1.0330552f), vec2(0.7257882f, 0.5854927f), vec2(-0.91149294f, -0.2697877f), vec2(0.7609877f, -1.0546814f), vec2(0.9822044f, 0.6242913f), vec2(-0.5698886f, -0.7316405f), vec2(-1.1314874f, 0.6560965f), vec2(0.78251034f, 1.1370932f), vec2(-1.3636216f, 0.048129156f), vec2(0.10074057f, 1.0073676f), vec2(0.9173388f, -0.16100103f), vec2(-0.09226973f, 1.3622584f), vec2(1.3751298f, 0.23780383f), vec2(0.85508716f, -0.1960402f), vec2(-0.33834136f, -1.0671881f), vec2(0.18917343f, -0.78322846f), vec2(0.96736836f, -0.7812386f), vec2(-0.6723574f, -1.040628f), vec2(-0.1644711f, -0.9615571f), vec2(0.6542758f, 0.2374394f), vec2(-1.1911526f, 0.30062264f), vec2(0.9419655f, 0.11158277f), vec2(0.6575406f, -0.9484127f), vec2(-0.8238076f, 1.1122954f), vec2(0.5140597f, 1.2110685f), vec2(1.1032765f, 0.7365981f), vec2(-0.44353247f, -1.3145844f), vec2(-0.5901191f, -1.2666806f), vec2(-1.0469567f, -0.7388439f), vec2(1.1779726f, -0.39403418f), vec2(-0.9425834f, 1.0510104f), vec2(-0.51554996f, -0.33405057f), vec2(0.3912034f, -0.19959898f), vec2(-0.74423045f, -0.031190123f), vec2(-1.3937405f, -0.13111988f), vec2(-0.36080727f, 0.82818633f), vec2(0.86244327f, 1.1207304f), vec2(0.31014922f, 1.1865888f), vec2(-1.0734963f, 0.14830358f), vec2(0.8602981f, 0.4256739f), vec2(-1.3940789f, 0.2322257f), vec2(-0.5985455f, 0.23719367f), vec2(-0.3765983f, 1.2885867f), vec2(-0.65556824f, -1.1795139f), vec2(1.272615f, 0.2962127f), vec2(-0.97883433f, 0.9472733f), vec2(-0.13175017f, -1.3472008f), vec2(-1.2544218f, -0.12499538f), vec2(-1.2415584f, 0.6509942f), vec2(-0.09392988f, -1.3893201f), vec2(-1.0829396f, 0.753836f), vec2(1.2407471f, 0.57596177f), vec2(1.32904f, -0.48217532f), vec2(-0.76933265f, -0.31538174f), vec2(0.04545564f, 0.081125215f), vec2(-1.3969661f, 0.15853731f), vec2(-0.54758286f, 0.000271677f), vec2(-1.3510836f, 0.1722851f), vec2(0.04188297f, 0.06015747f), vec2(-0.95156854f, 0.9658966f), vec2(-0.2075284f, 0.25036687f), vec2(0.38870504f, -1.3313224f), vec2(1.0709022f, -0.9144165f), vec2(-0.8593103f, 0.4316217f), vec2(0.7565393f, -0.8925849f), vec2(-0.7049585f, -0.84273195f), vec2(-0.46623582f, -1.3349999f), vec2(0.8566477f, 1.078009f), vec2(0.5544755f, 1.3008375f), vec2(0.41245577f, 1.3526767f), vec2(0.6530461f, -0.42420688f), vec2(0.5382382f, 0.6867629f), vec2(-1.3433348f, -0.16680439f), vec2(-1.0045227f, 0.41825238f), vec2(0.09651195f, 1.1686954f), vec2(-0.25981155f, -0.67198056f), vec2(-0.3910232f, 0.5039756f), vec2(-0.6877954f, 0.28618568f), vec2(0.7638297f, 0.5630094f), vec2(-0.54123807f, 0.18205516f), vec2(0.08171077f, 1.1287546f), vec2(0.64259857f, 1.0941539f), vec2(0.4787746f, -0.03633249f), vec2(-0.39213878f, 0.011929473f), vec2(0.39815313f, -1.1330636f), vec2(-1.3929057f, 0.19203274f), vec2(1.329253f, -0.091122076f), vec2(-0.6029329f, 1.2791228f), vec2(-0.14541242f, -1.0507766f), vec2(-1.3668414f, -0.06995429f), vec2(-0.71491593f, -0.50030607f), vec2(-1.0407052f, 0.94390106f), vec2(1.2481171f, 0.14009322f), vec2(1.2179711f, 0.6980103f), vec2(-0.14017652f, 1.0270689f), vec2(0.5740127f, 1.2159765f), vec2(-1.1362697f, -0.2261453f), vec2(1.0449332f, 0.12873495f), vec2(-0.24536948f, -1.2038103f), vec2(-0.72138214f, 0.6635814f), vec2(0.32464233f, 0.04745368f), vec2(0.98546934f, -0.8546678f), vec2(-0.042337745f, 1.0950724f), vec2(1.0775335f, -0.1459937f), vec2(-0.9340105f, 0.92445064f), vec2(-0.9351954f, 1.055978f), vec2(-0.015648047f, 0.9122649f), vec2(0.85186034f, -0.9741098f), vec2(-0.38441336f, -1.2365452f), vec2(-0.5556023f, -1.3003073f), vec2(-0.3490348f, -1.2020946f), vec2(-1.3095003f, -0.42675096f), vec2(-0.96386725f, -0.12656817f), vec2(-0.34470302f, 0.9087151f), vec2(-0.48439705f, 1.1254089f), vec2(-0.044264678f, 0.112692304f), vec2(-0.28542444f, 0.96634704f), vec2(0.21500662f, 0.5023194f), vec2(-0.5717601f, 0.24651186f), vec2(-0.98560876f, 0.03937642f), vec2(1.309065f, -0.44890806f), vec2(0.91967624f, -0.821069f), vec2(-1.1587512f, -0.12152173f), vec2(-1.202806f, -0.32248068f), vec2(-1.3768083f, 0.1513931f), vec2(0.26956078f, 0.538069f), vec2(0.7849327f, 1.0581241f), vec2(-0.68067205f, -1.2396284f), vec2(0.08015643f, 1.3771911f), vec2(0.35223797f, -1.3271736f), vec2(-0.66750765f, -1.2425766f), vec2(-0.32609338f, -0.3210031f), vec2(1.0418984f, -0.84387153f), vec2(-0.9795901f, -0.22744654f), vec2(0.5589782f, 0.8834539f), vec2(1.4141518f, 0.012478867f), vec2(0.26782414f, -1.2859728f), vec2(1.2416636f, -0.24589118f), vec2(-0.45992064f, 0.3221327f), vec2(-0.029019425f, -1.2202916f), vec2(0.6574516f, 0.7703582f), vec2(0.011175186f, -0.9506189f), vec2(-1.0500654f, -0.6189625f), vec2(-1.2772204f, -0.59274703f), vec2(-0.6404797f, 0.7602612f), vec2(-0.14658397f, -1.236692f), vec2(0.23816343f, -0.4076415f), vec2(-0.6676676f, -0.56248343f), vec2(1.2921097f, -0.14130992f), vec2(0.64948505f, 0.48652896f), vec2(1.2084122f, -0.5096774f), vec2(1.2239467f, 0.13040183f), vec2(-1.2286798f, -0.14867346f), vec2(1.3538346f, 0.40847257f), vec2(-0.30802414f, -0.12747024f), vec2(1.2767123f, 0.49862352f), vec2(-0.8285906f, -1.0774056f), vec2(-0.5071467f, -1.0891943f), vec2(1.0100921f, 0.77715206f), vec2(0.25009087f, 0.59092784f), vec2(-0.77582014f, -0.6051713f), vec2(-1.0371056f, -0.8719929f), vec2(0.17934804f, -1.1829607f), vec2(0.5370852f, 0.926357f), vec2(1.3791454f, 0.037700266f), vec2(0.55609953f, -1.2439675f), vec2(-0.8693754f, -1.0767791f), vec2(-0.3988404f, 0.6086868f), vec2(1.064279f, -0.359362f), vec2(0.8624888f, 0.41171923f), vec2(1.0176523f, 0.5358039f), vec2(0.991693f, -0.89468837f), vec2(1.3870782f, 0.22220524f), vec2(-1.3389932f, -0.24264172f), vec2(-0.13281739f, -0.803575f), vec2(1.3099176f, -0.41582856f), vec2(-1.1132622f, 0.33361655f), vec2(0.7626285f, -1.1384096f), vec2(0.5471143f, -0.61270267f), vec2(0.94676447f, -1.0198503f), vec2(0.75260985f, -1.1963551f), vec2(1.3719398f, 0.13033378f), vec2(0.3859091f, 1.320214f), vec2(-1.4069698f, -0.0016450355f), vec2(-0.8839283f, -0.42431095f), vec2(-0.36900008f, 0.34115937f), vec2(-1.0257475f, -0.5248928f), vec2(-0.7285196f, -1.1139015f), vec2(-1.0114247f, -0.88449204f), vec2(0.47637856f, -1.2418581f), vec2(1.0063905f, 0.9001384f), vec2(-0.42890787f, 0.88406706f), vec2(1.4082072f, -0.056426626f), vec2(-1.3162044f, -0.5169541f), vec2(0.11610606f, 1.3809185f), vec2(0.34094682f, 0.22217822f), vec2(0.5484877f, 0.2553046f), vec2(0.2321241f, -1.3672595f), vec2(-0.91225064f, 0.036186278f), vec2(1.1235197f, -0.15774307f), vec2(1.3589365f, -0.37654048f), vec2(-1.096192f, -0.5747241f), vec2(-1.0358756f, -0.9289162f), vec2(-1.0164686f, 0.32275033f), vec2(0.6416032f, -1.1766571f), vec2(0.54536104f, 1.2106426f), vec2(-1.3865292f, 0.21208195f), vec2(1.1277783f, -0.03702647f), vec2(-1.2496017f, 0.45359647f), vec2(-0.6244399f, 0.86208147f), vec2(-0.33214256f, -1.3175389f), vec2(0.46589863f, -1.2181879f), vec2(-1.1123129f, 0.8452513f), vec2(-0.111653596f, 1.3448056f), vec2(0.3082787f, -0.18445867f), vec2(-0.7075515f, -0.49100146f), vec2(0.9172336f, -1.076182f), vec2(-0.9868573f, -0.082664624f), vec2(0.7594779f, 0.91345555f), vec2(-0.5659764f, 0.9919839f), vec2(-0.078048356f, -0.29610813f), vec2(0.24437255f, -1.2943006f), vec2(-0.57917935f, -1.0063794f), vec2(-0.0014574778f, -0.374511f), vec2(1.0506802f, -0.8677176f), vec2(-0.87316954f, 0.54146636f), vec2(0.011706708f, 0.6228577f), vec2(0.048901558f, 0.6162326f), vec2(0.3428281f, 1.3481166f), vec2(0.86044264f, 0.7943503f), vec2(0.8986931f, 0.8977964f), vec2(-0.40851304f, -1.3357927f), vec2(-1.3354927f, -0.3168343f), vec2(-0.6963698f, -1.2226862f), vec2(1.4053332f, 0.15804414f), vec2(1.1895617f, 0.054590084f), vec2(-0.80410266f, 0.71266925f));
//masks ={ 132, 125, 91, 250, };
//int masks[4] ={ 27, 72, 28, 130 };
//float gridnoise_vals[256] ={ 0.34415323f, 0.36833444f, 0.30091473f, 0.7874165f, 0.84309256f, 0.6157728f, 0.077524655f, 0.679224f, 0.5528937f, 0.59737307f, 0.9091948f, 0.1909234f, 0.45542696f, 0.72050744f, 0.47474003f, 0.7569203f, 0.25989518f, 0.77254975f, 0.520078f, 0.66756207f, 0.5099059f, 0.71509403f, 0.31898686f, 0.6573044f, 0.115368806f, 0.9590227f, 0.5796784f, 0.5349398f, 0.2706626f, 0.09938849f, 0.7359693f, 0.9301729f, 0.8498099f, 0.21591035f, 0.48417944f, 0.5923918f, 0.7341478f, 0.4070767f, 0.14117339f, 0.62158716f, 0.7490739f, 0.29232275f, 0.15538433f, 0.49380538f, 0.020031735f, 0.2778989f, 0.9813741f, 0.69009155f, 0.92465436f, 0.5464185f, 0.42806402f, 0.6284504f, 0.8227475f, 0.18561779f, 0.29694644f, 0.18239188f, 0.9342667f, 0.46367094f, 0.5630441f, 0.25374174f, 0.2487174f, 0.22288767f, 0.0700607f, 0.4237952f, 0.26832765f, 0.2034572f, 0.22999275f, 0.50689644f, 0.5118959f, 0.088614136f, 0.697741f, 0.699507f, 0.3629242f, 0.31103137f, 0.64980036f, 0.64591384f, 0.6200234f, 0.7656362f, 0.4870875f, 0.31636274f, 0.63160235f, 0.9721095f, 0.95323557f, 0.58658344f, 0.024618486f, 0.6076993f, 0.4010892f, 0.8003357f, 0.7101053f, 0.49820548f, 0.67090935f, 0.13840117f, 0.1306922f, 0.33377397f, 0.816049f, 0.53527266f, 0.17110452f, 0.2102719f, 0.833082f, 0.99547666f, 0.06404987f, 0.8557425f, 0.878643f, 0.1593779f, 0.49020725f, 0.26249042f, 0.001628992f, 0.379373f, 0.08325498f, 0.23475917f, 0.3948579f, 0.41371268f, 0.17309931f, 0.41913643f, 0.693352f, 0.5304391f, 0.32922047f, 0.8281868f, 0.19880706f, 0.007801503f, 0.910971f, 0.8554583f, 0.83956814f, 0.43580434f, 0.92780805f, 0.661549f, 0.2555148f, 0.7288218f, 0.76289594f, 0.031823266f, 0.16784477f, 0.6352487f, 0.8908828f, 0.4781799f, 0.43974265f, 0.9454149f, 0.86004823f, 0.3407114f, 0.9043291f, 0.10499264f, 0.61230785f, 0.44380444f, 0.88853246f, 0.14819972f, 0.86772317f, 0.9496381f, 0.86512685f, 0.42989594f, 0.056037348f, 0.8954311f, 0.044517893f, 0.37462255f, 0.78252596f, 0.7431134f, 0.7035732f, 0.039423198f, 0.07976248f, 0.80355096f, 0.28821608f, 0.91766804f, 0.57346636f, 0.46574616f, 0.88553447f, 0.34794283f, 0.32538474f, 0.24383245f, 0.09454864f, 0.3761241f, 0.07241725f, 0.6553251f, 0.9618993f, 0.21109006f, 0.30761775f, 0.9013885f, 0.5182179f, 0.4150998f, 0.5603437f, 0.3390206f, 0.84644884f, 0.04760258f, 0.8104322f, 0.015361552f, 0.96524274f, 0.10948198f, 0.6435584f, 0.59906745f, 0.71464646f, 0.45295522f, 0.7779411f, 0.3636569f, 0.8060831f, 0.17614375f, 0.9786673f, 0.639249f, 0.8739952f, 0.73976487f, 0.28393164f, 0.44588566f, 0.7240442f, 0.14921133f, 0.1266301f, 0.58413446f, 0.11980651f, 0.2024576f, 0.8260445f, 0.162953f, 0.973784f, 0.4580507f, 0.29458022f, 0.91816133f, 0.24059792f, 0.061209947f, 0.8796561f, 0.010626268f, 0.5504039f, 0.46914974f, 0.031246252f, 0.60292095f, 0.5254488f, 0.19478524f, 0.93757766f, 0.9865345f, 0.7930039f, 0.03607847f, 0.8193929f, 0.10636554f, 0.13499488f, 0.052296527f, 0.32323503f, 0.99718094f, 0.38332042f, 0.50019515f, 0.38876873f, 0.6834564f, 0.68363935f, 0.7911213f, 0.39070064f, 0.3573017f, 0.56989115f, 0.75352883f, 0.6735472f, 0.2194134f, 0.9920612f, 0.76005346f, 0.7758482f, 0.015625447f, 0.35331208f, 0.5413537f, 0.40592524f, 0.94295436f, 0.55522454f, 0.57569367f, 0.091892764f, 0.27466998f, 0.233088f, 0.12466391f };


vec2 fade(vec2 t)
{
	return t * t * t * (t * (t * vec2(6) - vec2(15)) + vec2(10));
}

vec3 fade3(vec3 t)
{
	return t * t * t * (t * (t * vec3(6) - vec3(15)) + vec3(10));
}

// 2-D perlin noise.
float myNoise2(vec2 point)
{
	vec2 floored = floor(point);

	int X = int(floored.x) & 0xFF;
	int Y = int(floored.y) & 0xFF;

	int hash_x  = p_x[X];
	int hash_x1 = p_x[(X + 1) & 0xFF];
	int hash_y  = p_y[Y];
	int hash_y1 = p_y[(Y + 1) & 0xFF];

	vec2 fractional = point - floored;
	vec2 uv = fade(fractional);
	float u = uv.x;
	float v = uv.y;

	vec2 gradient_i_0 = gradients[hash_x   ^ hash_y];
	vec2 gradient_i_1 = gradients[hash_x1  ^ hash_y];
	vec2 gradient_i_2 = gradients[hash_x   ^ hash_y1];
	vec2 gradient_i_3 = gradients[hash_x1  ^ hash_y1];

	float w_0 = (1 - u) * (1 - v);
	float w_1 = (u) * (1 - v);
	float w_2 = (1 - u) * (v);
	float w_3 = (u) * (v);

	float d_0 = dot(fractional - vec2(0, 0), gradient_i_0);
	float d_1 = dot(fractional - vec2(1, 0), gradient_i_1);
	float d_2 = dot(fractional - vec2(0, 1), gradient_i_2);
	float d_3 = dot(fractional - vec2(1, 1), gradient_i_3);

	return w_0*d_0 + w_1*d_1 + w_2*d_2 + w_3*d_3;
}

float myNoise3(vec3 point)
{
	vec3 floored = floor(point);

	int X = int(floored.x) & 0xFF;
	int Y = int(floored.y) & 0xFF;
	int Z = int(floored.z) & 0xFF;

	int hash_x  = p_x[X];
	int hash_x1 = p_x[(X + 1) & 0xFF];
	int hash_y  = p_y[Y];
	int hash_y1 = p_y[(Y + 1) & 0xFF];
	int hash_z  = p_z[Z];
	int hash_z1 = p_z[(Z + 1) & 0xFF];

	vec3 fractional = point - floored;
	vec3 uvw = fade3(fractional);
	float u = uvw.x;
	float v = uvw.y;
	float w = uvw.z;

	vec2 gradient_i_0 = gradients[hash_x  ^ hash_y  ^ hash_z];
	vec2 gradient_i_1 = gradients[hash_x1 ^ hash_y  ^ hash_z];
	vec2 gradient_i_2 = gradients[hash_x  ^ hash_y1 ^ hash_z];
	vec2 gradient_i_3 = gradients[hash_x1 ^ hash_y1 ^ hash_z];
	vec2 gradient_i_4 = gradients[hash_x  ^ hash_y  ^ hash_z1];
	vec2 gradient_i_5 = gradients[hash_x1 ^ hash_y  ^ hash_z1];
	vec2 gradient_i_6 = gradients[hash_x  ^ hash_y1 ^ hash_z1];
	vec2 gradient_i_7 = gradients[hash_x1 ^ hash_y1 ^ hash_z1];

	float w_0 = (1 - u) * (1 - v) * (1 - w);
	float w_1 = (u) * (1 - v) * (1 - w);
	float w_2 = (1 - u) * (v) * (1 - w);
	float w_3 = (u) * (v) * (1 - w);

	float w_4 = (1 - u) * (1 - v) * w;
	float w_5 = (u) * (1 - v) * w;
	float w_6 = (1 - u) * (v) * w;
	float w_7 = (u) * (v) * w;

	float d_0 = dot(fractional.xy - vec2(0, 0), gradient_i_0);
	float d_1 = dot(fractional.xy - vec2(1, 0), gradient_i_1);
	float d_2 = dot(fractional.xy - vec2(0, 1), gradient_i_2);
	float d_3 = dot(fractional.xy - vec2(1, 1), gradient_i_3);

	float d_4 = dot(fractional.xy - vec2(0, 0), gradient_i_4);
	float d_5 = dot(fractional.xy - vec2(1, 0), gradient_i_5);
	float d_6 = dot(fractional.xy - vec2(0, 1), gradient_i_6);
	float d_7 = dot(fractional.xy - vec2(1, 1), gradient_i_7);

	float res = w_0 * d_0 + w_1 * d_1 + w_2 * d_2 + w_3 * d_3 +
		w_4 * d_4 + w_5 * d_5 + w_6 * d_6 + w_7 * d_7;

	return res;
}

float fbm2(vec2 point)
{
	float sum = 0;
	float scale = 1.f;
	float mag = 1.f;
	for(int i=0; i<7; ++i)
	{
//		if(i == 6)
	//		mag *= 5.;

		sum += myNoise2(point * scale) * mag;
		scale *= 2.f;
		mag *= 0.5f;
	}
	return sum;
}

float fbm3(vec3 point)
{
	return 
		myNoise3(point) +
		myNoise3(point * 2.0) * 0.5 + 
		myNoise3(point * 4.0) * 0.25 + 
		myNoise3(point * 8.0) * 0.125;
}


float rayPlaneIntersect(vec3 raystart, vec3 ray_unitdir, float plane_h)
{
	float start_to_plane_dist = raystart.z - plane_h;

	return start_to_plane_dist / -ray_unitdir.z;
}

vec2 rot(vec2 p)
{
	float theta = 1.618034 * 3.141592653589 * 2;
	return vec2(cos(theta) * p.x - sin(theta) * p.y, sin(theta) * p.x + cos(theta) * p.y);
}

vec2 rot2(vec2 p)
{
	float theta = 2 * 1.618034 * 3.141592653589 * 2;
	return vec2(cos(theta) * p.x - sin(theta) * p.y, sin(theta) * p.x + cos(theta) * p.y);
}

vec2 rot3(vec2 p)
{
	float theta = 3 * 1.618034 * 3.141592653589 * 2;
	return vec2(cos(theta) * p.x - sin(theta) * p.y, sin(theta) * p.x + cos(theta) * p.y);
}

vec2 rotA(vec2 p)
{
	float theta = 0.2 * 3.141592653589 * 2;
	return vec2(cos(theta) * p.x - sin(theta) * p.y, sin(theta) * p.x + cos(theta) * p.y);
}

float fbm(vec2 p)
{
	return (texture(fbm_tex, p).x - 0.5) * 2.f;
}

float noise(vec2 p)
{
	return (texture(noise_tex, p).x - 0.5) * 2.f;
}


float fbmMix(vec2 p)
{
	//return fbm2(p); // TEMP

	return 
		fbm(p) +
		fbm(rot(p * 1)) * 0.5 +
		//fbm(rot2(p * 1)) * 0.25 +
		0;
	
}
float fbmMixRotated(vec2 p)
{
	return fbmMix(rotA(p));
}


float length2(vec2 v)
{
	return dot(v, v);
}


void main()
{
	vec4 col;
	if(have_texture != 0)
		col = texture(diffuse_tex, (texture_matrix * vec3(texture_coords.x, texture_coords.y, 1.0)).xy);
	else
		col = diffuse_colour;

	// Render sun
	vec4 suncol = vec4(9124154304.569067, 8038831044.193394, 7154376815.37873, 1);
	float d = dot(sundir_cs.xyz, normalize(pos_cs));
	//col = mix(col, suncol, smoothstep(0.9999, 0.9999892083461507, d));
	col = mix(col, suncol, smoothstep(0.99997, 0.9999892083461507, d));

	
	// Get position ray hits cloud plane
	float cirrus_cloudfrac = 0;
	float cumulus_cloudfrac = 0;
	float ray_t = rayPlaneIntersect(campos_ws, dir_ws, 6000);
	vec4 cumulus_col = vec4(0,0,0,0);
	float cumulus_alpha = 0;
	float cumulus_edge = 0;
	if(ray_t > 0)
	{
		vec3 hitpos = campos_ws + dir_ws * ray_t;

		vec2 p = hitpos.xy * 0.0001;


		p.x += time * 0.002;

		

#if 1

		vec2 fine_noise_coords = vec2(p.x * 0.4, p.y * 12);

		//fine_noise_coords.y += fbmMix(p * 0.02) * 30; // Slowly bend streaks left and right over large distances
		fine_noise_coords.y += noise(p) * 0.3; // Slowly bend streaks left and right over large distances

		float fine_detail = fbmMix(fine_noise_coords);



		vec2 fine_noise_coords2 = vec2(p.x * 5, p.y * 3);
		float fine_detail2 = fbmMixRotated(fine_noise_coords2);


			
		vec2 coarse_noise_coords = vec2(p.x * 0.16, p.y * 0.20);
		float course_detail = fbmMix(vec2(coarse_noise_coords));// , time * 0.1));


		//vec2 cumulus_coords = vec2(p.x * 0.1 + 2.3453, p.y * 0.1 + 1.4354);
		//float cumulus = fbmMix(cumulus_coords);


		//float cloudfrac = max(0.f, course_detail) * (/*fine_detail2 * 0.2 + */fine_detail); //  max(0.f, fine_detail2 + 0.7)* fine_detail;
		cirrus_cloudfrac =
			-0.8 +
			course_detail * 1.0 +
			fine_detail * 0.6 +
			fine_detail2 * 0.6 +
			0;

		
#endif

		/*float dist_factor = 1.f - smoothstep(80000, 160000, ray_t);

		// Perturb coords a bit
		p.y += myNoise2(p * 0.9) * 0.05;
		p.y += myNoise2(p * 20.9) * 0.003;
		p.x += time * 0.005;

		vec2 fine_noise_coords = vec2(p.x * 3, p.y * 80);
		float fine_detail = fbm3(vec3(fine_noise_coords, time * 0));

		vec2 fine_noise_coords2 = vec2(p.x * 145, p.y * 190);
		float fine_detail2 = myNoise2(fine_noise_coords2);

		vec2 coarse_noise_coords = vec2(p.x * 0.4, p.y * 1);
		float course_detail = fbm2(vec2(coarse_noise_coords));// , time * 0.1));

		float cloudfrac = dist_factor * max(0.f, course_detail) * max(0.f, fine_detail2 + 0.7) * fine_detail;
		float w = 1.0e9;
		vec4 cloudcol = vec4(w, w, w, 1);
		col = mix(col, cloudcol, max(0.f, cloudfrac));
		*/
	}
		
	{
		float cumulus_ray_t = rayPlaneIntersect(campos_ws, dir_ws, 1000);
		if(cumulus_ray_t > 0)
		{
			vec3 hitpos = campos_ws + dir_ws * cumulus_ray_t;

			vec2 p = hitpos.xy * 0.0001;

			p.x += time * 0.002;

			//float w = 1.0e9;

			vec2 cumulus_coords = vec2(p.x * 2 + 2.3453, p.y * 2 + 1.4354);
			
			float cumulus_val = fbmMix(cumulus_coords);
			cumulus_alpha = max(0.f, cumulus_val);

			float w = 1.0e9;

			

			// Ray march
			//for(int i=0; i<10; ++i)
			//{
			//	vec2 cloud_p = p + vec2(-i * 0.00001, -i * 0.00001);
			//	float pval = max(0.f, fbmMix(cloud_p));
			//	cumulus_val *= 1 - pval * 0.2;
			//}

			//cumulus_val *= w;

			cumulus_edge = smoothstep(0.0001, 0.1, cumulus_val) - smoothstep(0.2, 0.6, cumulus_val) * 0.5;// (cumulus_alpha < 0.05f) ? 1.f : 0.f;

			float dist_factor = 1.f - smoothstep(80000, 160000, ray_t);

			cumulus_col = vec4(cumulus_val, cumulus_val, cumulus_val, 1);
			cumulus_cloudfrac = dist_factor * cumulus_val;
		}
	}

	float cloudfrac = max(cirrus_cloudfrac, cumulus_cloudfrac);
	float w = 1.0e9;
	vec4 cloudcol = vec4(w, w, w, 1);
	col = mix(col, cloudcol, max(0.f, cloudfrac));
	float sunw = w * 2.5;
	vec4 suncloudcol = vec4(sunw, sunw, sunw, 1);
	float blend = max(0.f, cumulus_edge) * max(0, pow(d, 32));// smoothstep(0.9, 0.9999892083461507, d);
	col = mix(col, suncloudcol, blend);

	//col = mix(col, cumulus_col, cumulus_alpha);


#if DEPTH_FOG
	// Blend lower hemisphere into a colour that matches fogged ground quad in Substrata
	// Chosen by hand to match the fogged phong colour at ~2km (edge of ground quad)
	vec4 lower_hemis_col = vec4(pow(6.5, 2.2), pow(6.8, 2.2), pow(7.3, 2.2), 1.0) * 1.6e7;

	float lower_hemis_factor = smoothstep(1.52, 1.6, texture_coords.y);
	col = mix(col, lower_hemis_col, lower_hemis_factor);
#endif

	col *= 0.0000000005;
	colour_out = vec4(toNonLinear(col.xyz), 1);
}
