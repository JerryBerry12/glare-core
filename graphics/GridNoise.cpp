/*=====================================================================
GridNoise.cpp
-------------------
Copyright Glare Technologies Limited 2016 -
Generated at 2011-06-22 22:23:03 +0100
=====================================================================*/
#include "GridNoise.h"


#include "../maths/mathstypes.h"
#include "../utils/MTwister.h"
#include "../utils/StringUtils.h"
#include <fstream>


// From gridnoise_data.txt
const uint8 p_x[256] = { 231, 101, 162, 155, 221, 105, 34, 28, 116, 181, 138, 154, 144, 45, 255, 17, 251, 226, 204, 21, 81, 49, 129, 118, 214, 174, 62, 8, 102, 35, 93, 179, 89, 246, 98, 128, 170, 171, 0, 57, 61, 111, 59, 97, 217, 203, 32, 86, 132, 65, 108, 75, 228, 235, 91, 74, 156, 215, 223, 158, 193, 30, 152, 202, 25, 77, 222, 243, 211, 183, 42, 122, 206, 233, 197, 120, 9, 54, 220, 173, 56, 16, 6, 117, 145, 12, 161, 96, 27, 178, 121, 124, 68, 131, 248, 26, 125, 199, 191, 141, 44, 67, 82, 2, 109, 112, 13, 139, 36, 107, 234, 15, 52, 187, 1, 201, 249, 113, 115, 207, 166, 254, 219, 205, 185, 64, 244, 7, 73, 90, 106, 157, 41, 11, 151, 164, 50, 227, 71, 236, 40, 150, 165, 46, 172, 103, 137, 63, 176, 209, 210, 238, 22, 18, 38, 140, 186, 177, 29, 23, 127, 247, 87, 100, 240, 149, 133, 230, 76, 66, 4, 78, 3, 24, 143, 148, 194, 192, 19, 14, 188, 84, 196, 212, 94, 200, 110, 224, 39, 10, 142, 47, 252, 85, 237, 168, 5, 218, 70, 104, 198, 195, 182, 241, 232, 225, 130, 53, 242, 250, 147, 20, 175, 184, 180, 69, 169, 245, 31, 119, 33, 114, 51, 92, 55, 163, 43, 58, 208, 135, 79, 37, 159, 253, 229, 88, 80, 134, 123, 136, 126, 60, 160, 213, 83, 48, 239, 153, 99, 95, 167, 216, 190, 189, 72, 146 }; 
const uint8 p_y[256] = { 50, 163, 25, 146, 86, 180, 182, 69, 208, 58, 249, 0, 118, 7, 183, 155, 176, 210, 42, 218, 204, 142, 156, 119, 66, 101, 97, 29, 232, 149, 80, 195, 47, 63, 141, 31, 83, 38, 26, 217, 76, 143, 185, 152, 11, 230, 100, 244, 186, 169, 95, 193, 82, 89, 226, 99, 62, 90, 52, 33, 191, 221, 220, 4, 181, 96, 92, 5, 205, 130, 56, 207, 3, 24, 39, 30, 139, 225, 160, 122, 246, 117, 248, 213, 237, 41, 140, 255, 134, 121, 110, 197, 242, 251, 51, 40, 78, 60, 32, 79, 57, 178, 45, 151, 36, 241, 14, 27, 254, 224, 173, 223, 243, 231, 202, 209, 158, 190, 71, 104, 23, 214, 37, 55, 240, 137, 170, 219, 203, 144, 21, 13, 239, 54, 85, 77, 8, 22, 115, 28, 46, 199, 73, 126, 20, 222, 228, 235, 253, 74, 148, 88, 128, 188, 171, 216, 172, 87, 212, 12, 179, 124, 17, 167, 6, 184, 168, 112, 164, 65, 162, 98, 250, 127, 114, 48, 129, 68, 145, 81, 187, 245, 102, 135, 189, 229, 16, 91, 136, 166, 200, 43, 93, 107, 94, 157, 61, 113, 175, 161, 252, 194, 111, 196, 211, 238, 247, 64, 233, 147, 159, 9, 132, 133, 75, 84, 154, 234, 215, 34, 44, 174, 70, 35, 236, 2, 108, 49, 123, 192, 109, 120, 153, 201, 10, 165, 150, 15, 105, 19, 206, 72, 125, 227, 53, 67, 103, 138, 131, 59, 116, 1, 198, 18, 177, 106 }; 
const uint8 p_z[256] = { 139, 47, 196, 125, 189, 195, 215, 57, 221, 77, 178, 59, 159, 232, 248, 94, 251, 176, 186, 224, 249, 234, 116, 164, 83, 180, 172, 236, 101, 141, 167, 245, 214, 34, 63, 133, 120, 191, 179, 27, 243, 90, 97, 222, 37, 117, 45, 237, 92, 184, 61, 100, 67, 188, 10, 2, 142, 58, 165, 144, 255, 8, 85, 108, 87, 12, 121, 28, 231, 41, 52, 14, 254, 95, 201, 15, 81, 244, 72, 242, 119, 74, 93, 246, 9, 32, 17, 118, 64, 68, 161, 38, 154, 235, 247, 103, 55, 220, 84, 162, 205, 69, 111, 228, 173, 70, 211, 49, 56, 130, 35, 140, 230, 82, 208, 131, 153, 89, 212, 170, 209, 3, 174, 73, 177, 21, 157, 233, 44, 31, 24, 148, 23, 134, 30, 113, 185, 33, 169, 43, 218, 88, 158, 122, 238, 182, 216, 168, 54, 151, 240, 225, 40, 124, 199, 62, 114, 155, 98, 227, 197, 145, 0, 1, 20, 6, 66, 79, 239, 126, 210, 19, 11, 13, 200, 75, 60, 123, 193, 76, 48, 171, 129, 147, 99, 138, 156, 198, 150, 96, 86, 50, 39, 253, 36, 135, 241, 146, 5, 26, 204, 127, 109, 29, 213, 91, 229, 53, 152, 7, 128, 223, 181, 202, 115, 187, 4, 226, 163, 143, 136, 105, 22, 137, 190, 46, 250, 25, 207, 71, 51, 107, 132, 203, 42, 18, 16, 110, 183, 252, 192, 206, 65, 219, 194, 104, 166, 106, 78, 102, 112, 80, 175, 217, 149, 160 }; 
const uint8 p_w[256] = { 170, 198, 116, 49, 29, 26, 250, 18, 34, 36, 84, 221, 154, 214, 95, 207, 176, 16, 231, 234, 79, 148, 21, 118, 90, 151, 11, 220, 73, 173, 223, 39, 228, 254, 59, 127, 171, 191, 161, 245, 166, 78, 218, 165, 102, 108, 202, 253, 74, 162, 172, 232, 121, 20, 28, 60, 54, 159, 128, 35, 110, 69, 27, 82, 219, 186, 237, 71, 236, 179, 216, 210, 248, 25, 147, 169, 58, 80, 244, 150, 155, 53, 92, 137, 77, 62, 185, 15, 249, 184, 242, 153, 188, 164, 103, 101, 23, 144, 235, 239, 200, 76, 230, 96, 156, 199, 174, 209, 238, 50, 158, 224, 212, 251, 87, 196, 140, 22, 112, 187, 178, 86, 217, 19, 13, 138, 211, 6, 157, 132, 57, 222, 139, 183, 215, 51, 120, 241, 203, 225, 125, 70, 37, 205, 146, 94, 240, 33, 136, 115, 119, 213, 246, 133, 252, 189, 247, 135, 109, 97, 114, 175, 45, 99, 117, 107, 129, 181, 98, 141, 167, 61, 227, 104, 1, 143, 206, 81, 8, 64, 124, 14, 24, 47, 201, 145, 30, 243, 56, 255, 38, 123, 193, 52, 163, 93, 142, 180, 105, 204, 131, 40, 83, 72, 91, 126, 160, 46, 63, 122, 85, 152, 68, 42, 0, 233, 67, 195, 229, 111, 149, 48, 197, 134, 12, 113, 75, 100, 106, 31, 194, 208, 43, 17, 65, 55, 182, 192, 4, 10, 44, 130, 3, 190, 7, 2, 168, 41, 32, 5, 89, 66, 226, 9, 177, 88 };
const float data[256] = { 0.34415323f, 0.36833444f, 0.30091473f, 0.7874165f, 0.84309256f, 0.6157728f, 0.077524655f, 0.679224f, 0.5528937f, 0.59737307f, 0.9091948f, 0.1909234f, 0.45542696f, 0.72050744f, 0.47474003f, 0.7569203f, 0.25989518f, 0.77254975f, 0.520078f, 0.66756207f, 0.5099059f, 0.71509403f, 0.31898686f, 0.6573044f, 0.115368806f, 0.9590227f, 0.5796784f, 0.5349398f, 0.2706626f, 0.09938849f, 0.7359693f, 0.9301729f, 0.8498099f, 0.21591035f, 0.48417944f, 0.5923918f, 0.7341478f, 0.4070767f, 0.14117339f, 0.62158716f, 0.7490739f, 0.29232275f, 0.15538433f, 0.49380538f, 0.020031735f, 0.2778989f, 0.9813741f, 0.69009155f, 0.92465436f, 0.5464185f, 0.42806402f, 0.6284504f, 0.8227475f, 0.18561779f, 0.29694644f, 0.18239188f, 0.9342667f, 0.46367094f, 0.5630441f, 0.25374174f, 0.2487174f, 0.22288767f, 0.0700607f, 0.4237952f, 0.26832765f, 0.2034572f, 0.22999275f, 0.50689644f, 0.5118959f, 0.088614136f, 0.697741f, 0.699507f, 0.3629242f, 0.31103137f, 0.64980036f, 0.64591384f, 0.6200234f, 0.7656362f, 0.4870875f, 0.31636274f, 0.63160235f, 0.9721095f, 0.95323557f, 0.58658344f, 0.024618486f, 0.6076993f, 0.4010892f, 0.8003357f, 0.7101053f, 0.49820548f, 0.67090935f, 0.13840117f, 0.1306922f, 0.33377397f, 0.816049f, 0.53527266f, 0.17110452f, 0.2102719f, 0.833082f, 0.99547666f, 0.06404987f, 0.8557425f, 0.878643f, 0.1593779f, 0.49020725f, 0.26249042f, 0.001628992f, 0.379373f, 0.08325498f, 0.23475917f, 0.3948579f, 0.41371268f, 0.17309931f, 0.41913643f, 0.693352f, 0.5304391f, 0.32922047f, 0.8281868f, 0.19880706f, 0.007801503f, 0.910971f, 0.8554583f, 0.83956814f, 0.43580434f, 0.92780805f, 0.661549f, 0.2555148f, 0.7288218f, 0.76289594f, 0.031823266f, 0.16784477f, 0.6352487f, 0.8908828f, 0.4781799f, 0.43974265f, 0.9454149f, 0.86004823f, 0.3407114f, 0.9043291f, 0.10499264f, 0.61230785f, 0.44380444f, 0.88853246f, 0.14819972f, 0.86772317f, 0.9496381f, 0.86512685f, 0.42989594f, 0.056037348f, 0.8954311f, 0.044517893f, 0.37462255f, 0.78252596f, 0.7431134f, 0.7035732f, 0.039423198f, 0.07976248f, 0.80355096f, 0.28821608f, 0.91766804f, 0.57346636f, 0.46574616f, 0.88553447f, 0.34794283f, 0.32538474f, 0.24383245f, 0.09454864f, 0.3761241f, 0.07241725f, 0.6553251f, 0.9618993f, 0.21109006f, 0.30761775f, 0.9013885f, 0.5182179f, 0.4150998f, 0.5603437f, 0.3390206f, 0.84644884f, 0.04760258f, 0.8104322f, 0.015361552f, 0.96524274f, 0.10948198f, 0.6435584f, 0.59906745f, 0.71464646f, 0.45295522f, 0.7779411f, 0.3636569f, 0.8060831f, 0.17614375f, 0.9786673f, 0.639249f, 0.8739952f, 0.73976487f, 0.28393164f, 0.44588566f, 0.7240442f, 0.14921133f, 0.1266301f, 0.58413446f, 0.11980651f, 0.2024576f, 0.8260445f, 0.162953f, 0.973784f, 0.4580507f, 0.29458022f, 0.91816133f, 0.24059792f, 0.061209947f, 0.8796561f, 0.010626268f, 0.5504039f, 0.46914974f, 0.031246252f, 0.60292095f, 0.5254488f, 0.19478524f, 0.93757766f, 0.9865345f, 0.7930039f, 0.03607847f, 0.8193929f, 0.10636554f, 0.13499488f, 0.052296527f, 0.32323503f, 0.99718094f, 0.38332042f, 0.50019515f, 0.38876873f, 0.6834564f, 0.68363935f, 0.7911213f, 0.39070064f, 0.3573017f, 0.56989115f, 0.75352883f, 0.6735472f, 0.2194134f, 0.9920612f, 0.76005346f, 0.7758482f, 0.015625447f, 0.35331208f, 0.5413537f, 0.40592524f, 0.94295436f, 0.55522454f, 0.57569367f, 0.091892764f, 0.27466998f, 0.233088f, 0.12466391f };


void GridNoise::generateData()
{
	MTwister rng(1);

	const int N = 256;

	float data_[256];
	uint8 p_x_[256];
	uint8 p_y_[256];
	uint8 p_z_[256];
	uint8 p_w_[256];

	// Generate some random floating point values stratified over the unit interval.
	for(int i=0; i<N; ++i)
		data_[i] = (i + rng.unitRandom()) * (1.0f / N);

	// Permute
	for(int t=N-1; t>=0; --t)
	{
		int k = (int)(rng.unitRandom() * t);
		mySwap(data_[t], data_[k]);
	}


	for(int i=0; i<N; ++i)
		p_x_[i] = p_y_[i] = p_z_[i] = p_w_[i] = (uint8)i;

	// Permute
	for(int t=N-1; t>=0; --t)
	{
		{
			int k = (int)(rng.unitRandom() * t);
			mySwap(p_x_[t], p_x_[k]);
		}
		{
			int k = (int)(rng.unitRandom() * t);
			mySwap(p_y_[t], p_y_[k]);
		}
		{
			int k = (int)(rng.unitRandom() * t);
			mySwap(p_z_[t], p_z_[k]);
		}
		{
			int k = (int)(rng.unitRandom() * t);
			mySwap(p_w_[t], p_w_[k]);
		}
	}


	// Some code to print out the tables used, so the OpenCL implementation can use the same data
	{
		std::ofstream file("gridnoise_data.txt");

		file << "\np_x = ";
		for(int i=0; i<N; ++i)
			file << toString(p_x_[i]) + ", ";

		file << "\np_y = ";
		for(int i=0; i<N; ++i)
			file << toString(p_y_[i]) + ", ";

		file << "\np_z = ";
		for(int i=0; i<N; ++i)
			file << toString(p_z_[i]) + ", ";

		file << "\np_w = ";
		for(int i=0; i<N; ++i)
			file << toString(p_w_[i]) + ", ";

		file << "\ndata = ";
		for(int i=0; i<N; ++i)
			file << floatLiteralString(data_[i]) + ", ";
	}
}

